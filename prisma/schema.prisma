generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum Role {
  CLIENT
  ADMIN
  SELLER
  SUPERADMIN
  USER
}

enum EcommerceType {
  PRODUCTOS
  SERVICIOS
  MIXTO
}

enum IndustryType {
  ROPA
  TECNOLOGIA
  COSMETICA
  CONSULTORIA
  OTRO
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  DELIVERED
}

enum PaymentMethod {
  MERCADOPAGO
  CASH
  TRANSFER
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

enum ShippingType {
  CORREO
  MOTO
  RETIRO
}

enum ShippingStatus {
  PENDIENTE
  PREPARANDO
  ENVIADO
  ENTREGADO
  CANCELADO
}

enum CartStatus {
  ACTIVE
  EXPIRED
  ORDERED
  CANCELLED
  ABANDONED
  CHECKED_OUT
  COMPLETED
  PENDING_PAYMENT
  PAYMENT_FAILED
}

enum CouponStatus {
  ACTIVE
  EXPIRED
  REDEEMED
}

enum CouponType {
  EXCHANGE_POINT
  PROMOTION
}

enum ImageType {
  PRODUCT
  VARIANT
  CATEGORY
  BRAND
  PROFILE
  BANNER
  CONFIG
}

// User Models

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(CLIENT)
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())

  person    Person?
  addresses Address[]
  orders    Order[]
  payments  Payment[]
  carts     Cart[]
  coupons   UserCoupon[]
  favorites FavoriteProduct[]
  points    Int      @default(0)
  profileImage Image?
}

model Person {
  id        String   @id @default(uuid())
  name      String
  phone     String?
  cuitOrDni String?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Address {
  id          String     @id @default(uuid())
  street      String
  city        String
  province    String
  postalCode  String
  lat         Float?
  lng         Float?
  isDefault   Boolean    @default(true)
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  shippingInfos ShippingInfo[]
  ecommerceConfig EcommerceConfig?
}

// Product & Related
model Color {
  id        String   @id @default(uuid())
  name      String   
  hex      String   @unique
  variants  ProductVariant[]
}

model Size {
  id        String   @id @default(uuid())
  name      String   @unique
  variants  ProductVariant[]
}

model Gender {
  id        String   @id @default(uuid())
  name      String   @unique
  variants  ProductVariant[]
}

model Product {
  id           String           @id @default(uuid())
  name         String           @unique
  description  String
  priceList    Float
  price        Float
  isService    Boolean          @default(false)
  isActive     Boolean          @default(true)
  hasDelivery  Boolean          @default(true)
  isDeleted    Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  categoryId   String
  category     Category         @relation(fields: [categoryId], references: [id])

  brandId      String
  brand        Brand            @relation(fields: [brandId], references: [id])

  variants     ProductVariant[]
  orderItems   OrderItem[]
  cartItems    CartItem[]
  favoritedBy  FavoriteProduct[]
}

model ProductVariant {
  id        String   @id @default(uuid())
  stock     Int
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product  @relation(fields: [productId], references: [id])

  colorId   String
  color     Color     @relation(fields: [colorId], references: [id])

  sizeId    String
  size      Size      @relation(fields: [sizeId], references: [id])

  genderId  String
  gender    Gender    @relation(fields: [genderId], references: [id])

  cartItems CartItem[]
  orderItems OrderItem[]
  images     Image[]
}

model Image {
  id          String   @id @default(uuid())
  url         String
  description String?
  order       Int      @default(0)
  type        ImageType

  productId   String?
  variantId   String?
  categoryId  String?
  brandId     String?
  userId      String? @unique
  configId    String?
  bannerId    String? @unique

  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  category    Category?       @relation(fields: [categoryId], references: [id])
  brand       Brand?          @relation(fields: [brandId], references: [id])
  user        User?           @relation(fields: [userId], references: [id])
  ecommerceConfig EcommerceConfig? @relation(fields: [configId], references: [id])
  banner      EcommerceBanner?     @relation(fields: [bannerId], references: [id])
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  parentId    String?
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  parent      Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToParent")
  products    Product[]
  images      Image[]
}

model Brand {
  id        String   @id @default(uuid())
  name      String   @unique
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[]
  images    Image[]
}

model FavoriteProduct {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  @@unique([userId, productId])
}

model EcommerceConfig {
  id        String         @id @default(uuid())
  type      EcommerceType
  industry  IndustryType
  isDeleted Boolean        @default(false)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  addressId String?        @unique
  address   Address?       @relation(fields: [addressId], references: [id])
  images    Image[]
  banners   EcommerceBanner[]
}

model EcommerceBanner {
  id        String   @id @default(uuid())
  title     String?
  subtitle  String?
  link      String?
  configId  String
  config    EcommerceConfig @relation(fields: [configId], references: [id])
  image     Image?
}

// Cart & Order Models

model Cart {
  id        String     @id @default(uuid())
  status    CartStatus @default(ACTIVE)
  isDeleted Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]

  couponId  String?    @unique
  coupon    Coupon?    @relation(fields: [couponId], references: [id])
}

model CartItem {
  id         String   @id @default(uuid())
  quantity   Int
  unitPrice  Float
  discount   Float?
  finalPrice Float
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cartId     String
  productId  String
  variantId  String
  cart       Cart     @relation(fields: [cartId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  variant    ProductVariant @relation(fields: [variantId], references: [id])
}

model Order {
  id               String        @id @default(uuid())
  status           OrderStatus   @default(PENDING)
  total            Float
  subtotal         Float
  shippingCost     Float
  paymentConfirmed DateTime?
  isDeleted        Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  userId           String
  user             User          @relation(fields: [userId], references: [id])
  items            OrderItem[]

  payment          Payment?
  shippingInfo     ShippingInfo?

  couponId         String?       @unique
  coupon           Coupon?       @relation(fields: [couponId], references: [id])
}

model OrderItem {
  id         String   @id @default(uuid())
  quantity   Int
  unitPrice  Float
  discount   Float?
  finalPrice Float
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orderId    String
  productId  String
  variantId  String
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  variant    ProductVariant @relation(fields: [variantId], references: [id])
}

model Payment {
  id                  String   @id @default(uuid())
  method              PaymentMethod
  status              PaymentStatus
  amount              Float
  mpPaymentId         String?
  mpStatus            String?
  mpStatusDetail      String?
  mpExternalReference String?
  mpPreferenceId      String?
  isDeleted           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  orderId             String   @unique
  userId              String
  order               Order    @relation(fields: [orderId], references: [id])
  user                User     @relation(fields: [userId], references: [id])
}

model ShippingInfo {
  id                    String   @id @default(uuid())
  type                  ShippingType
  status                ShippingStatus
  trackingNumber        String?
  trackingUrl           String?
  estimatedDeliveryDate DateTime
  shippedAt             DateTime?
  deliveredAt           DateTime?
  isDeleted             Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  orderId               String   @unique
  addressId             String?
  order                 Order    @relation(fields: [orderId], references: [id])
  address               Address? @relation(fields: [addressId], references: [id])
}

model Coupon {
  id          String        @id @default(uuid())
  description String
  value       Int
  price       Int
  code        String        @unique
  type        CouponType    @default(EXCHANGE_POINT)
  status      CouponStatus  @default(ACTIVE)
  expiresAt   DateTime
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  users       UserCoupon[]  @relation("UserCouponAssigned")
  parents     UserCoupon[]  @relation("UserCouponParent")
  cart        Cart?
  order       Order?
}

model UserCoupon {
  userId          String
  couponId        String
  parentCouponId  String?
  assignedAt      DateTime   @default(now())
  enabled         Boolean    @default(true)
  isDeleted       Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user            User       @relation(fields: [userId], references: [id])
  coupon          Coupon     @relation("UserCouponAssigned", fields: [couponId], references: [id])
  parentCoupon    Coupon?    @relation("UserCouponParent", fields: [parentCouponId], references: [id])

  @@id([userId, couponId])
}