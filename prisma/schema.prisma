generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  ADMIN
  SELLER
  SUPERADMIN
  USER
}

enum EcommerceType {
  PRODUCTOS
  SERVICIOS
  MIXTO
}

enum IndustryType {
  ROPA
  TECNOLOGIA
  COSMETICA
  CONSULTORIA
  OTRO
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  DELIVERED
}

enum PaymentMethod {
  MERCADOPAGO
  CASH
  TRANSFER
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

enum ShippingType {
  CORREO
  MOTO
  RETIRO
}

enum ShippingStatus {
  PENDIENTE
  PREPARANDO
  ENVIADO
  ENTREGADO
  CANCELADO
}

enum CartStatus {
  ACTIVE
  EXPIRED
  ORDERED
  CANCELLED
}

enum CouponStatus {
  ACTIVE
  EXPIRED
  REDEEMED
}

enum CouponType {
  EXCHANGE_POINT
  PROMOTION
}


model User {
  id        String       @id @default(uuid())
  email     String       @unique
  password  String
  role      Role         @default(CLIENT)
  person    Person?
  orders    Order[]
  payments  Payment[]
  carts     Cart[]
  addresses Address[]
  coupons   UserCoupon[]
  points    Int          @default(0)
  createdAt DateTime     @default(now())
  isDeleted Boolean      @default(false)
}



model Person {
  id        String   @id @default(uuid())
  name      String
  phone     String?
  cuitOrDni String?
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Address {
  id        String   @id @default(uuid())
  street    String
  city      String
  province  String
  postalCode String
  isDefault Boolean  @default(true)
  lat       Float?
  lng       Float?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  shippingInfos ShippingInfo[]
}

model Product {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String
  price           Float
  isService       Boolean          @default(false)
  isActive        Boolean          @default(true)
  hasDelivery     Boolean          @default(true)
  categoryId      String
  category        Category         @relation(fields: [categoryId], references: [id])
  brandId         String
  brand           Brand         @relation(fields: [brandId], references: [id])
  images          ProductImage[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  variants        ProductVariant[]
  createdAt       DateTime         @default(now())
}

model ProductVariant {
  id        String   @id @default(uuid())
  size      String
  color     String
  stock     Int
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  cartItems CartItem[]
  orderItems OrderItem[]

}

model ProductImage {
  id          String   @id @default(uuid())
  url         String
  description String?
  order       Int
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToParent")
  products    Product[]
}

model Brand {
  id          String     @id @default(uuid())
  name        String     @unique
  code        String?
  products    Product[]
}

model EcommerceConfig {
  id            String   @id @default(uuid())
  type          EcommerceType
  industry      IndustryType
  createdAt     DateTime @default(now())
}

model Coupon {
  id          String        @id @default(uuid())
  description String
  value       Int
  price       Int
  type        CouponType    @default(EXCHANGE_POINT)
  code        String        @unique
  status      CouponStatus  @default(ACTIVE)
  expiresAt   DateTime
  users       UserCoupon[]  
  cart        Cart?
  order       Order?
  createdAt   DateTime      @default(now())
}

model UserCoupon {
  userId   String
  couponId String
  assignedAt DateTime @default(now())
  enabled   Boolean   @default(true)
  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([userId, couponId]) 
}

model Cart {
  id        String     @id @default(uuid())
  status    CartStatus @default(ACTIVE)
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  couponId  String?    @unique 
  coupon    Coupon?    @relation(fields: [couponId], references: [id])
}

model CartItem {
  id         String          @id @default(uuid())
  cartId     String
  productId  String
  variantId  String
  quantity   Int
  unitPrice  Float
  discount   Float?
  finalPrice Float
  cart       Cart            @relation(fields: [cartId], references: [id])
  product    Product         @relation(fields: [productId], references: [id])
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
}

model Order {
  id               String        @id @default(uuid())
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  items            OrderItem[]
  payment          Payment?
  shippingInfo     ShippingInfo?
  status           OrderStatus   @default(PENDING)
  total            Float
  subtotal         Float
  shippingCost     Float
  createdAt        DateTime      @default(now())
  paymentConfirmed DateTime?
  couponId  String?    @unique 
  coupon    Coupon?    @relation(fields: [couponId], references: [id])
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  quantity   Int
  unitPrice  Float
  discount   Float?
  finalPrice Float
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  variantId  String
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
}


model Payment {
  id                  String   @id @default(uuid())
  orderId             String  @unique
  userId              String
  method              PaymentMethod
  status              PaymentStatus
  amount              Float
  mpPaymentId         String?
  mpStatus            String?
  mpStatusDetail      String?
  mpExternalReference String?
  mpPreferenceId      String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model ShippingInfo {
  id                    String   @id @default(uuid())
  orderId               String  @unique
  provider              String?
  type                  ShippingType
  status                ShippingStatus
  address               String
  city                  String
  province              String
  postalCode            String
  recipientName         String
  recipientPhone        String
  trackingNumber        String?
  trackingUrl           String?
  estimatedDeliveryDate DateTime
  shippedAt             DateTime?
  deliveredAt           DateTime?
  createdAt             DateTime @default(now())
  addressId             String?
  addressRef            Address? @relation(fields: [addressId], references: [id])

  order Order @relation(fields: [orderId], references: [id])
}
